Чтение и запись текстовых файлов. FileWriter и FileReader

1. Запись файлов. Класс FileWriter
Класс FileWriter является производным от класса Writer. Он используется для записи текстовых файлов.
Класс поддерживает несколько конструкторов:
 - FileWriter(File file)
 - FileWriter(File file, boolean append)
 - FileWriter(FileDescriptor fd)
 - FileWriter(String fileName)
 - FileWriter(String fileName, boolean append)

В конструктор передается либо путь к файлу(строка), либо объект File, который ссылается на конкретный текстовый файл.
Если параметр append равен true - дозапись в конец файла, false - перезапись.

try (FileWriter writer = new FileWriter("notes3.txt", false)) {
    // запись всей строки ----------------------------------------------------------------------------------------------
    String text = "Hello Gold!";
    writer.write(text);

    // запись по символам ----------------------------------------------------------------------------------------------
    writer.append('\n');
    writer.append('E');

    writer.flush();
} catch(IOException ex) {
    System.out.println(ex.getMessage());
}

------------------------------------------------------------------------------------------------------------------------

2. Чтение файлов. Класс FileReader

Класс FileReader наследуется от абстрактного класса Reader и предоставляет функциональность для чтения текстовых файлов.
Класс поддерживает несколько конструкторов:
 - FileReader(String fileName)
 - FileReader(File file)
 - FileReader(FileDescriptor fd)

try (FileReader reader = new FileReader("notes3.txt")) {
    // читаем посимвольно ----------------------------------------------------------------------------------------------
    int c;

    while ((c = reader.read()) != -1) {
        System.out.print((char)c);
    }
} catch(IOException ex) {
    System.out.println(ex.getMessage());
}

Также мы можем считывать в промежуточный буфер из массива символов:

try (FileReader reader = new FileReader("notes3.txt")) {
    char[] buf = new char[256];
    int c;

    while ((c = reader.read(buf)) > 0) {
        if (c < 256) {
            buf = Arrays.copyOf(buf, c);
        }

        System.out.print(buf);
    }
} catch(IOException ex) {
    System.out.println(ex.getMessage());
}

В данном случае считываем последовательно символы из файла в массив из 256 символов, пока не дойдем до конца файла
в этом случае метод read возвратит число -1.
Поскольку считанная порция файла может быть меньше 256 символов (например, в файле всего 73 символа),
и если количество считанных данных меньше размера буфера (256), то выполняем копирование массива с помощью метода
Arrays.copy. То есть фактически обрезаем массив buf, оставляя в нем только те символы, которые считаны из файла.

------------------------------------------------------------------------------------------------------------------------
