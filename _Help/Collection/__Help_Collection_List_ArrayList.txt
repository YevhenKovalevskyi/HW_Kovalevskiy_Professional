-- ArrayList - это список реализованный в виде массива, все элементы в нем отсортированы в порядке добавления.
-- Контейнер, оптимизированный для произвольного доступа к элементам, но с относительно медленными операциями вставки/удаления.
-- Может менять свой размер во время исполнения программы, при этом не обязательно указывать размерность при создании объекта.
-- Можете вставить новый элемент в любое место коллекции. А также спокойно удалить элемент из любого места.
-- Позволяет хранить любые объекты, в том числе null и повторяющиеся.

-- Доступ к элементу по индексу осуществляется за фиксированное время O(1)
-- Доступ к элементу по значению зависит от кол-ва элементов и занимает O(n)
-- Вставка/удаление внутри списка: - !!! это ПРОБЛЕМА ArrayList !!!
    - проверяем, хватает ли места (при вставке)
    - если не хватает — создаем новый массив и копируем туда данные (при вставке)
    - удаляем/вставляем элемент, и сдвигаем все остальные элементы вправо/влево (в зависимости от типа операции).
      Причем сложность этого процесса сильно зависит от размера списка.
      Одно дело — скопировать/сдвинуть 10 элементов, и совсем другое — сделать то же самое с миллионом элементов.
    - Расширение, копирование  и сдвиг элементов делает метод  - System.arrayCopy() - делает быстро. -------------------
-- Вставка/удаление последнего элемента списка осуществляется за фиксированное время O(1).
-- При удалении размер массива не уменьшается, до явного вызова метода trimToSize().

------------------------------------------------------------------------------------------------------------------------
-- В ArrayList можно не указывать ТИП, если мы уверены, что все элементы будут одного типа. ----------------------------
   ArrayList catNames = new ArrayList();
   catNames.add("Васька");
   System.out.println(catNames.get(0));

-- Если такой уверенности нет - при создании ArrayList указываем тип. --------------------------------------------------
   ArrayList<String> mCatNames = new ArrayList<String>();
   или
   ArrayList<String> mCatNames = new ArrayList<>();
   или
   ArrayList<Cat> cats = new ArrayList<>();

-- Первоначальную ёмкость можно задать в конструкторе в качестве параметра. --------------------------------------------
   ArrayList catNames = new ArrayList(100);
   или
   ArrayList<String> сatNames = new ArrayList<>(100);

------------------------------------------------------------------------------------------------------------------------
-- Метод add() - добавляет элемент в конец списка. ---------------------------------------------------------------------
   catNames.add("Васька");

   существует перегруженная версия метода, позволяющая вставлять элемент в нужную позицию.
   catNames.add(2, new Cat("Рыжик"));

    - Следует быть осторожным, чтобы ненароком не вставить в несуществующую позицию.
    - При вставке в середину коллекции системе приходится заново пересчитывать индексы элементов.

-- Метод addAll() - добавляет все элементы коллекции в список в порядке их расположения --------------------------------
   catNames2.addAll(catNames);

   существует перегруженная версия метода, позволяющая вставлять коллекцию начиная с нужной позиции.
   catNames2.addAll(1, catNames);

-- Метод clone() - возвращает объект-копию. ----------------------------------------------------------------------------

-- Метод remove() - удаление элемента. Можно удалять по индексу или по объекту. ----------------------------------------
   сatNames.remove(0); // удаляем по индексу
   сatNames.remove("Васька"); // удаляем по объекту. Если таких элементов несколько, будет удален первый из них.

   Элементы, следующие после удалённого элемента, сдвигаются влево, а размер списочного массива уменьшается на единицу!!

-- Метод removeAll() - удаляет сразу все элементы. Но лучше использовать метод clear(). --------------------------------
   сatNames.removeAll();

-- Метод clear() - очистка массива. Работает гораздо быстрее метода removeAll(). ---------------------------------------
   сatNames.clear();

-- Метод removeIf() - удаление элемента по предикату. ------------------------------------------------------------------
   ArrayList<Integer> numList = new ArrayList<>();
   ...
   numList.removeIf(val -> (val > 10 && val < 20));

-- Метод contains() - проверяет присутствует ли элемент в списке, возвращает true или false. ---------------------------
   сatNames.contains("Бобик")

-- Метод indexOf() - ищет первое вхождение элемента(по значению) в список и выводит его индекс. ------------------------
   int index = сatNames.indexOf("Рыжик");

-- Метод lastIndexOf() - ищет последнее вхождение элемента(по значению) в список и выводит его индекс. -----------------
   int index = сatNames.lastIndexOf("Рыжик");

-- Метод get() - возвращает элемент списка по его индэксу. -------------------------------------------------------------
   сatNames.get(2);

-- Метод set() производит замену элемента списка с указанием индекса и новым значением. --------------------------------
   catNames.set(1, "Мурка");

-- Метод size() - возвращает текущее количество элементов в массиве. ---------------------------------------------------
   сatNames.size();

-- Метод isEmpty() - проверяет список на пустой. -----------------------------------------------------------------------
   сatNames.isEmpty();

-- Метод sort() - сортирует список по заданному правилу. ---------------------------------------------------------------
   catNames.sort(lambda);

-- Метод ensureCapacity() - проверяет, достаточно ли места в списке для вставки нового элемента. -----------------------
   catNames.ensureCapacity(100);
   Если достаточно - ничего не делает, если нет - расширяет до указанного размера

-- Метод trimToSize() - урезает емкость экземпляра ArrayList до текущего размера списка. -------------------------------
   ArrayList<Integer> сatNames = new ArrayList<Integer>(5);
   catNames.add("Васька");
   catNames.add("Бобик");
   catNames.trimToSize();
   в результате catNames.size() = 2

------------------------------------------------------------------------------------------------------------------------
-- Просмотр всех элементов через цикл. ---------------------------------------------------------------------------------
   for (int i = 0; i < сatNames.size(); i++) { }
   или
   for (String name : сatNames) { }
   или
   for (Iterator<String> it = сatNames.iterator(); it.hasNext();) {
      String cat = it.next();
      printItemList(cat);
   }
   или
   сatNames.forEach(lambda);
   или
   сatNames.stream().forEach(lambda);

-- Метод iterator() - возвращает объект класса, реализующего интерфейс Iterator. ---------------------------------------
   Iterator<Integer> iterator = arrayList.iterator();

   while (iterator.hasNext()) {
       Integer item = iterator.next();
   }

-- Метод listIterator() - возвращает объект класса, реализующего интерфейс Iterator. -----------------------------------
   ListIterator<Integer> listIterator = arrayList.listIterator();

   while (listIterator.hasNext()) {
       Integer item = listIterator.next();
   }

------------------------------------------------------------------------------------------------------------------------
-- Метод toArray() - конвертируем в обычный массив ---------------------------------------------------------------------
   ArrayList<String> days = new ArrayList<>();
   ...
   String[] daysArray = days.toArray(new String[days.size()]);
   или через stream
   String[] daysArray = days.stream().toArray(String[]::new);

-- Метод frequency() интерфейса Collections - возвращает колличество совпадений элемента -------------------------------
   int count = Collections.frequency(сatNames, "Мурзик");

-- Метод replaceAll() - выполняет замену одних элементов другими. ------------------------------------------------------
   Collections.replaceAll(сatNames, "a", "z");
   или
   сatNames.replaceAll(lambda);

-- Метод subList() - выделяет область из текущего списка, с которой можно работать. ------------------------------------
   сatNames.subList(2, 7).clear();

------------------------------------------------------------------------------------------------------------------------
-- ЕСЛИ СПИСОК СОЗДАЕТСЯ ИЗ УЖЕ ГОТОВОГО МАССИВА - ИЗМЕНЯТЬ ЕГО РАЗМЕР МЫ БОЛЕЕ НЕ МОЖЕМ !!!
   List<Integer> numbers = Arrays.asList(1, 2, 5, 9, 11);
   методы add() и delete() в данном случае не работают, но работает метод set()
------------------------------------------------------------------------------------------------------------------------
