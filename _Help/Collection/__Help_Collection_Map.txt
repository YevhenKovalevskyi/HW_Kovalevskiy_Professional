Map (Отображение) - интерфейс, "ассоциативный массив" или "словарь". !!! Map НЕ расширяет Collection(как List, Set) !!!
В контейнерах Map хранятся два объекта: ключ и связанное с ним значение.

Map позволяет искать объекты по ключу. Объект, ассоциированный с ключом, называется значением.
И ключи, и значения являются объектами. Ключи могут быть уникальными, а значения могут дублироваться.
Некоторые Map допускают пустые ключи и пустые значения.

Map не поддерживают реализацию интерфейса Iterable, поэтому нельзя перебрать карту через цикл for в форме for-each.

------------------------------------------------------------------------------------------------------------------------

 - AbstractMap - абстрактный класс, реализующий большую часть интерфейса Map
 - EnumMap - расширяет класс AbstractMap для использования с ключами перечислимого типа enum
 - HashMap - структура данных для хранения пар "ключ-значение", применяется для использования хеш-таблицы
 - LinkedHashMap - Map с запоминанием порядка, в котором добавлялись элементы, разрешает перебор в порядке вставки
 - TreeMap - для использования дерева, т.е. Map с отсортированными ключами
 - WeakHashMap - для использования хеш-таблицы со слабыми ключами, Map со значениями, которые могут удаляться GC,
   если они больше не используются
 - IdentityHashMap - использует проверку ссылочной эквивалентности при сравнении документов, Map с ключами,
   сравниваемыми с помощью операции == вместо метода equals()

 - ConcurrentMap - решает проблемы согласования пропускной способности с безопасностью потоков
 - ConcurrentHashMap -
 - ConcurrentNavigableMap -
 - ConcurrentSkipListMap -

------------------------------------------------------------------------------------------------------------------------

interface Map<K, V>

В параметре K указывается тип ключей, в V - тип хранимых значений.

 - Метод put(K k, V v) - помещает элемент в MAP, переписывая любое предшествующее значение, ассоциированное с ключом.
   Возвращает null, если ключ ранее не существовал. В противном случае возвращается предыдущее значение, связанное с ключом.
   Предварительно нужна проверка на отсутствие дубля, если не хотим затирания. Метод putIfAbsent делает это сразу. -----
   --- новые элементы вставляются в начало цепочки ---
   map.put(1, "text"); - в зависимости от типов при создании
   map.put("key", "value");

 - Метод putIfAbsent(K key, V value) - если указанный ключ еще не связан со значением (или сопоставлен с null),
   связывает его с заданным значением и возвращает null, иначе возвращает текущее значение. ----------------------------
   map.putIfAbsent("name", "Gus");

 - Метод putAll(Map<? extends K, ? extends V> map) - объединение двух MAP в одну. --------------------------------------
   map1.putAll(map2);

 - Метод get(Object k) - возвращает значение по ключу или null, если ключ не найден. -----------------------------------
   map.пуе("key");

 - Метод getOrDefault(Object key, V defaultValue) - возвращает значение по ключу или defaultValue, если ключ не найден.
   map.put("number", 100500);
   map.getOrDefault("I forgot my key", 0); // 0

 - Метод remove(Object k) - удаляет элемент по ключу. ------------------------------------------------------------------
   map.put("surname", "Petrov");
   map.remove("surname");

 - Метод remove(Object key, Object value) - перегруженный вариант - удаляет при совпадении и ключа и значения. ---------
   map.put("surname", "Petrov");
   map.remove("surname", "Petrov");

 - Метод clear() - удаляет все пары "ключ-значение" из MAP. ------------------------------------------------------------
   map.clear();

 - Метод size() - возвращает размер MAP. -------------------------------------------------------------------------------
   map.size();

 - Метод isEmpty() - проверяет MAP на пустоту - true/false. ------------------------------------------------------------
   map.isEmpty();

 - Метод containsKey(Object k) - проверяет на существование ключа - true/false. ----------------------------------------
   map.containsKey("key");

 - Метод containsValue(Object v) - проверяет на существование значения - true/false. -----------------------------------
   map.containsKey("value");

 - Метод equals(Object o) - проверяет на равенство значений - true/false. ----------------------------------------------
   map1.equals(map2);

 - Метод entrySet() - возвращает множество(SET - объекты интерфейса Map.Entry) значений MAP. ---------------------------
   Set<String> values = map.entrySet();

 - Метод keySet() - возвращает множество(SET - объекты интерфейса Map.Entry) ключей MAP. -------------------------------
   Set<Integer> keys = map.keySet();

 - Метод values() - возвращает коллекцию значений MAP. -----------------------------------------------------------------
   map.values();
   ArrayList<String> values = new ArrayList<>(map.values());

 - Метод replace(K key, V newValue) - заменяет значение ключа key на newValue, если такой ключ существует. -------------

 - Метод replace(K key, V oldValue, V newValue) - перегруженный вариант - делает то же самое, но учитывается еще и
   совпадение oldValue
   books.replace("Братья Карамазовы", "Брюс Эккель", "Джон Толкин");

 - Метод replaceAll(Function) - заменяет все значения с помошью функции. -----------------------------------------------
   books.replaceAll((a,b) -> "Крутой писатель");

 - Метод merge(K key, V value, Function) - объединяет значение в Map по ключу. -----------------------------------------
   При этом, если такой пары в Map нет, она будет создана.
   map.put("question", "Bla?");
   map.merge("question", " Blabla", (oldVal, newVal) -> oldVal + newVal);
   map.get("question"); // Bla? Blabla

 - Метод compute(K key, Function) - для указанного ключа устанавливает в качестве value результат выполнения функции. --
   books.compute("Философия Java", (a,b) -> b+", крутой чувак");

 - Метод computeIfPresent(K key, Function) - произвести действие со значением в Map, если оно существует. --------------
   map.put("name", "Joan");
   map.computeIfPresent("name", (key, value) -> key + ", " + value);
   map.get("name"); //output: name, Joan

 - Метод computeIfAbsent(K key, Function) - произвести действие со значением в Map, если оно не существует. ------------
   map.computeIfAbsent("awesome key", key -> key + ", " + "amazing value");
   map.get("awesome key"); //output: awesome key, amazing value

 - Метод forEach() - перебор
   books.forEach((a,b) -> System.out.println("Название книги: " + a + ". Автор: " + b));

 - Метод for() - перебор (Интерфейс Map.Entry обозначает как раз пару “ключ-значение” внутри словаря.)
   for (Map.Entry entry: map.entrySet()) {
      System.out.println(entry.getKey() + " = " + entry.getValue());
      entry.getKey() - метод получает ключ -----------------------------------------------------------------------------
      entry.getValue() - метод получает значение -----------------------------------------------------------------------
      entry.setValue(V value) - метод устанавливает значение -----------------------------------------------------------
   }
   ----------------
   for (String key: hashmap.keySet()) {
       System.out.println(hashmap.get(key));
   }
   ----------------
   Iterator<Map.Entry> itr = map.entrySet().iterator();

   while (itr.hasNext()) {
       System.out.println(itr.next());
   }
