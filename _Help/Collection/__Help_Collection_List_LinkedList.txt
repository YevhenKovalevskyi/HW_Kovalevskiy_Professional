-- LinkedList - двусвязный список, и реализует интерфейсы List, Dequeue, Queue.
-- Имеет больше операций, чем ArrayList, а значит более сложный и требующий больше памяти.
-- Позволяет хранить любые объекты, в том числе null и повторяющиеся.

-- Доступ к элементу по индексу зависит от кол-ва элементов и занимает O(n).
-- Доступ к элементу по значению зависит от кол-ва элементов и занимает O(n).
-- Вставка и удаление из середины списка зависит от кол-ва элементов и занимает O(n).
-- Вставка и удаление из середины списка, используя ListIterator.add() и ListIterator.remove(),
   осуществляется за фиксированное время O(1).

-- У каждого элемента LinkedList помимо тех данных, которые он хранит, имеется ссылка на предыдущий и следующий элемент.
-- По этим ссылкам можно переходить от одного элемента к другому.

------------------------------------------------------------------------------------------------------------------------
-- Инициализация такая же как и в ArrayList
   LinkedList<String> linkedList = new LinkedList<>();

-- Методы в своем большинстве совпадают с методами ArrayList. По этому опишем присущие только LinkedList. --------------

------------------------------------------------------------------------------------------------------------------------
-- Метод addFirst() - добавление нового элемента в нулевую позицию списка. ---------------------------------------------
   linkedList.addFirst("I think");

-- Метод addLast() - добавление нового элемента в конец списка. --------------------------------------------------------
   linkedList.addLast("language");

-- Метод add() - добавление нового элемента в указанную позицию. -------------------------------------------------------
   linkedList.add(2, "is a terrific");

-- Метод removeFirst() - удаляет первый элемент в списке. --------------------------------------------------------------
   linkedList.removeFirst();

-- Метод removeLast() - удаляет последний элемент в списке. ------------------------------------------------------------
   linkedList.removeLast();

-- Метод removeFirstOccurrence() - удаляет первое вхождение элемента в список. -----------------------------------------
   linkedList.removeFirstOccurrence("language");

-- Метод removeLastOccurrence() - удаляет последнее вхождение элемента в список. ---------------------------------------
   linkedList.removeLastOccurrence("Java");

-- Метод element() - возвращает первый элемент списка или возвращает ERROR в случае его отсутствия. --------------------
   linkedList.element();

-- Метод getFirst() - возвращает первый элемент списка или возвращает ERROR в случае его отсутствия. -------------------
   linkedList.getFirst();

-- Метод getLast() - возвращает последний элемент списка или возвращает ERROR в случае его отсутствия. -----------------
   linkedList.getLast();

-- Метод peek() - возвращает первый элемент списка или возвращает NULL в случае его отсутствия. ------------------------
   linkedList.peek();

-- Метод peekFirst() - возвращает первый элемент списка или возвращает NULL в случае его отсутствия. -------------------
   linkedList.peekLast();

-- Метод peekLast() - возвращает последний элемент списка или возвращает NULL в случае его отсутствия. -----------------
   linkedList.peekLast();

-- Метод poll() - возвращает первый элемент списка и удаляет его или возвращает NULL в случае его отсутствия. ----------
   linkedList.poll();

-- Метод pollFirst() - возвращает первый элемент списка и удаляет его или возвращает NULL в случае его отсутствия. -----
   linkedList.pollLast();

-- Метод pollLast() - возвращает последний элемент списка и удаляет его или возвращает NULL в случае его отсутствия. ---
   linkedList.pollLast();

------------------------------------------------------------------------------------------------------------------------