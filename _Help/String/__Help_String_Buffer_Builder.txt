Объекты String являются неизменяемыми, поэтому все операции, которые изменяют строки, фактически приводят к созданию
новой строки, что сказывается на производительности приложения.
Для решения этой проблемы, чтобы работа со строками проходила с меньшими издержками в Java были добавлены классы
StringBuffer и StringBuilder.
По сути они напоминает расширяемую строку, которую можно изменять без ущерба для производительности.

Эти классы похожи, практически двойники, они имеют одинаковые конструкторы, одни и те же методы, которые одинаково используются.
Единственное их различие состоит в том, что класс StringBuffer синхронизированный и потокобезопасный.
То есть класс StringBuffer удобнее использовать в многопоточных приложениях, где объект данного класса может меняться в различных потоках.
Если же речь о многопоточных приложениях не идет, то лучше использовать класс StringBuilder, который не потокобезопасный,
но при этом работает быстрее, чем StringBuffer в однопоточных приложениях.

------------------------------------------------------------------------------------------------------------------------

StringBuffer определяет четыре конструктора:
 - StringBuffer()
 - StringBuffer(int capacity)
 - StringBuffer(String str)
 - StringBuffer(CharSequence chars)

Аналогичные конструкторы определяет StringBuilder:
 - StringBuilder()
 - StringBuilder(int capacity)
 - StringBuilder(String str)
 - StringBuilder(CharSequence chars)

При всех операциях со строками StringBuffer / StringBuilder перераспределяет выделенную память.
И чтобы избежать слишком частого перераспределения памяти, StringBuffer/StringBuilder заранее резервирует
некоторую область памяти, которая может использоваться.

Конструктор без параметров резервирует в памяти место для 16 символов. Если мы хотим, чтобы количество символов было иным,
то мы можем применить второй конструктор, который в качестве параметра принимает количество символов.

Третий и четвертый конструкторы обоих классов принимают строку и набор символов,
при этом резервируя память для дополнительных 16 символов.

StringBuffer strBuffer = new StringBuffer(str);

------------------------------------------------------------------------------------------------------------------------

 - Метод length(): возвращает текущую длину объекта.
   strBuffer.setText("Длина: " + sb.length());

 - Метод capacity(): возвращает количество символов, для которых зарезервирована память.
   strBuffer.capacity();

 - Метод ensureCapacity(): изменяет минимальную емкость буфера символов.
   strBuffer.ensureCapacity(32);

 - Метод charAt(): получает символ по определенному индексу.
   strBuffer.charAt(0);

 - Метод setCharAt(): устанавливает символ по определенному индексу.
   strBuffer.setCharAt(0, 'c');

 - Метод getChars(): получает набор символов между определенными индексами.
   strBuffer.getChars(startIndex, endIndex, buffer, 0);

 - Метод append(): добавляет подстроку в конец StringBuffer.
   strBuffer.append(" world");

 - Метод insert(): добавляет подстроку в конец StringBuffer.
   strBuffer.insert(0, "s");

 - Метод delete(): удаляет все символы с определенного индекса до определенной позиции.
   strBuffer.delete(0, 2);

 - Метод deleteCharAt(): удаляет один символ по определенному индексу.
   strBuffer.deleteCharAt(6);

 - Метод substring(): обрезает строку с определенного индекса до конца, либо до определенного индекса.
   strBuffer.substring(6);
   strBuffer.substring(3, 9);

 - Метод setLength(): измененяет длину StringBuffer (не емкости буфера символов).
   strBuffer.setLength(10);

 - Метод replace(): заменяет подстроку между определенными позициями в StringBuffer на другую подстроку.
   strBuffer.replace(6, 11, "java");

 - Метод reverse(): меняет порядок в StringBuffer на обратный.
   strBuffer.reverse();

------------------------------------------------------------------------------------------------------------------------
