Строка представляет собой последовательность символов. Для работы со строками в Java определен класс String,
который предоставляет ряд методов для манипуляции строками.
Физически объект String представляет собой ссылку на область в памяти, в которой размещены символы.

При работе со строками важно понимать, что объект String является неизменяемым (immutable).
То есть при любых операциях над строкой, которые изменяют эту строку, фактически будет создаваться новая строка.

Класс поддерживает несколько конструкторов:
 - String str1 = "Java";
 - String str2 = new String(); // пустая строка
 - String str3 = new String("text");
 - String str4 = new String(new char[] {'h', 'e', 'l', 'l', 'o'});
 - String str5 = new String(new char[]{'w', 'e', 'l', 'c', 'o', 'm', 'e'}, 3, 4); //3 - начальный индекс, 4 - кол-во символов

------------------------------------------------------------------------------------------------------------------------

String s = null;   // строка не указывает на объект
if(s.length()==0) System.out.println("String is empty");    // ! Ошибка

Так как переменная не указывает ни на какой объект String, то соответственно мы не можем обращаться к методам объекта String.
Чтобы избежать подобных ошибок, можно предварительно проверять строку на null:

------------------------------------------------------------------------------------------------------------------------

 - Метод length(): возвращает длину строки или длину набора символов

 - Метод concat(String str): объединяет строки

 - Метод valueOf(): преобразует объект в строковый вид

 - Метод isEmpty(): проверяет строку на пустоту

 - Метод join(CharSequence delimiter, CharSequence... elements): соединяет строки с учетом разделителя

 - Метод split(String regex): разбивает строку с учетом разделителя

 - Метод matches(String regex): проверяет, соответствует ли строка регулярным выражениям.

 - Метод contains(CharSequence s): проверяет, содержит ли строка заданную последовательность символов и возвращает true или false.
 - Метод contentEquals(CharSequence s): сравнивает CharSequence с этой строкой + перегруженные версии

 - Метод сompare(String str): сравнивает две строки
 - Метод compareTo(String str): сравнивает две строки (0, -int, int)
 - Метод compareToIgnoreCase(String str): сравнивает StringBuffer с этой строкой

 - Метод copyValueOf(char[] data): создаёт новую строку, содержащую символы из указанного массива + перегруженные версии

 - Метод charAt(int index): возвращает символ строки по индексу
 - Метод getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin): возвращает группу символов
 - Метод toCharArray(): преобразует строку в массив символов

 - Метод equals(Object object): сравнивает строки с учетом регистра
 - Метод equalsIgnoreCase(String str): сравнивает строки без учета регистра

 - Метод regionMatches(int toffset, String other, int oofset, int len): сравнивает подстроки в строках + перегруженные версии

 - Метод indexOf(String str): находит индекс первого вхождения подстроки в строку + перегруженные версии
 - Метод lastIndexOf(String str): находит индекс последнего вхождения подстроки в строку + перегруженные версии

 - Метод startsWith(String prefix): определяет, начинается ли строка с подстроки
 - Метод startsWith(String prefix, int toffset): определяет, начинается ли строка с подстроки
 - Метод endsWith(String suffix): определяет, заканчивается ли строка на определенную подстроку

 - Метод replace(char target, char replacement): заменяет в строке одну подстроку на другую + перегруженные версии
 - Метод replaceAll(String regex, String replacement): заменяет в строке одну подстроку на другую
 - Метод replaceFirst (String regex, String replacement): заменяет первые символы при помощи регулярного выражения.

 - Метод trim(): удаляет начальные и конечные пробелы

 - Метод intern(): «Xэширует» строку

 - Метод format(Locale locale, String format, Object... args): возвращает отформатированную строку

 - Метод substring(int beginIndex): возвращает подстроку, начиная с определенного индекса до конца или
   до определенного индекса + перегруженные версии

 - Метод toLowerCase(): переводит все символы строки в нижний регистр
 - Метод toUpperCase(): переводит все символы строки в верхний регистр

 - Метод codePointAt(int index): возвращает Unicode-символ в заданном индексе
 - Метод codePointBefore(int index): возвращает Unicode-символ, который предшествует данному индексу
 - Метод codePointCount(int start, int end): возвращает количество Unicode-символов между позициями start и end

 - Метод getBytes(): конвертируем строку в набор байтов + перегруженные версии

