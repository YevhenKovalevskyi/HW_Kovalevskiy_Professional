https://projectlombok.org/features/all

Аннотации в Java - это специальная форма синтетических метаданных, которая может быть добавлена в исходный код.
Аннотации используются для анализа кода, компиляции или выполнения.
Аннотированы могут быть пакеты, классы, методы, переменные и параметры.

Аннотации представляют из себя дескрипторы, включаемые в текст программы, и используются для хранения метаданных
программного кода, необходимых на разных этапах жизненного цикла программы.
Информация, хранимая в аннотациях, может использоваться соответствующими обработчиками для создания необходимых
вспомогательных файлов или для маркировки классов, полей и т.д.
То есть, аннотации могут быть применены к декларациям классов, полей, методов, ну и конечно же аннотаций.

Аннотация выполняет следующие функции :
 - предоставляет необходимую информацию для компилятора;
 - предоставляет информацию различным инструментам для генерации другого кода, конфигураций и т. д.;
 - может быть использована во время работы кода.

------------------------------------------------------------------------------------------------------------------------

Встроенные аннотации: отслеживаются средой разработки IDE и применяются к java-коду метода:

 - @Repeatable
 - @FunctionalInterface - указывает на функциональный интерфес
 - @SafeVarargs - аннотация-маркер, применяется к методам и конструкторам.
   Она указывает, что никакие небезопасные действия, связанные с параметром переменного количества аргументов, недопустимы.
   Применяется только к методам и конструкторам с переменным количеством аргументов, которые объявлены как static или final.

 - @Override - Проверка переопределения метода. IDE вызывает предупреждение компиляции, если метод не найден в родительском классе.
 - @Deprecated - IDE отмечает, что метод устарел и вызывает предупреждение компиляции, если метод используется.
 - @SuppressWarnings - Аннотация указывает IDE подавить предупреждения компиляции.

   Аннотации, применяемые к другим аннотациям:

 - @Retention - позволяет определить жизненный цикл аннотации. Будет она присутствовать только в исходном коде,
   в скомпилированном файле, или будет также видна и в процессе выполнения.
   Параметры к аннотации:
    - RetentionPolicy.SOURCE - используется на этапе компиляции и должна отбрасываться компилятором
    - RetentionPolicy.CLASS - будет записана в class-файл компилятором, но не должна быть доступна во время выполнения
    - RetentionPolicy.RUNTIME - будет записана в class-файл и доступна во время выполнения через reflection

 - @Documented - помеченные такой аннотацией класс/метод/поле должны быть добавлены в javadoc.
 - @Target - указывает, что именно должно быть помечено аннотацией. Это может быть поле, метод, тип и т.д.
   Параметры к аннотации:
    - @Target(ElementType.PACKAGE) - только для пакетов
    - @Target(ElementType.TYPE) - только для классов
    - @Target(ElementType.CONSTRUCTOR) - только для конструкторов
    - @Target(ElementType.METHOD) - только для методов
    - @Target(ElementType.FIELD) - только для атрибутов(переменных) класса
    - @Target(ElementType.PARAMATER) - только для параметров метода
    - @Target(ElementType.LOCAL_VARIABLE) - только для локальных переменных

    Если необходимо, что бы аннотация использовалась больше чем для одного типа параметров:
    @Target({ ElementType.PARAMETER, ElementType.LOCAL_VARIABLE })

 - @Inherited - Отмечает, что аннотация может быть расширенна подклассами аннотируемого класса.
   @Inherited
   @interface PublicAnnotate { }

   @interface PrivateAnnotate { }

   @PublicAnnotate
   @PrivateAnnotate
   class ParentClass { }

   class ChildClass extends ParentClass { } - унаследует от родительского класса только аннотацию PublicAnnotate.

------------------------------------------------------------------------------------------------------------------------

Поля аннотации могут быть обязательными и необязательными. В последнем случае подставляется default значение поля. -----
В качестве типов параметров аннотации могут использоваться только примитивные типы, Enum и класс String.
Если у аннотации нет элементов, ее называют маркером (marker annotation type).

------------------------------------------------------------------------------------------------------------------------

Описания новой аннотации.

Аннотации создаются с использование механизма, основанного на интерфейсе. Ключевое слово @interface:
    public @interface Description {
        String title();
        int version() default 1;
        String text();
    }

Символ @ - указывает компилятору, что объявлена аннотация. Методы, объявленные в аннотации ведут себя скорее как поля.

Пример использования аннотации Description:
    @Description(title="title", version=2, text="text")
    public class Sample {
        // ...
    }

Пример аннотации с параметрами:
    import java.lang.annotation.*;

    @Target(value=ElementType.FIELD)
    @Retention(value=RetentionPolicy.RUNTIME)
    public @interface Name {
        String name();
        String type() default "string";
    }

------------------------------------------------------------------------------------------------------------------------

Repeatable

@Repeatable(Math.Maths.class)
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface Math {
    int num1() default 0;
    int num2() default 0;

    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.RUNTIME)
    @interface Maths {
        Math[] value();
    }
}

----------

@Math(num1=10, num2=20)
@Math(num1=20, num2=30)
public void mathSum(int num1, int num2) {
    System.out.println(num1 + num2);
}
