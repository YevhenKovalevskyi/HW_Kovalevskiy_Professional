Статические вложенные классы - классы без стека(не занимают память кучи/стека, т.к. нет необходимости создавать экземпляр такого класса)

Статический класс - это класс, объявленный как статический член другого класса.
Как и другие статические члены, такой класс на самом деле является просто вешалкой, которая использует содержащийся класс
в качестве своего пространства имен, например, класс Goat, объявленный как статический член класса Rhino в пакете pizza,
известен под именем pizza.Rhino.Goat.

------------------------------------------------------------------------------------------------------------------------

public class Outer {
    ...

    public(private/protected/default) static class Nested {
        ...
    }
}

------------------------------------------------------------------------------------------------------------------------

Как и всякий статический элемент, статический класс привязан к самому классу, а не к его экземпляру.
Это означает, что мы можем создать экземпляр вложенного класса, не создавая промежуточный экземпляр внешнего класса.
Область видимости вложенного класса ограничена областью видимости внешнего класса.

Outer.Nested instance = new Outer.Nested();

------------------------------------------------------------------------------------------------------------------------

 - поддерживаются все модификаторы доступа;
 - можно определить как статические, так и нестатические члены;
 - доступны только!!! статические члены заключающего класса;
   (может сделать статическую ссылку на статические поля/методы заключающего класса и наоборот);
 - может создать экземпляр заключающего класса и через него получить доступ к нестатическим элементам заключающего класса;
 - ВНЕШНИЙ КЛАСС ИМЕЕТ ДОСТУП к СТАТИЧЕСКИМ ЭЛЕМЕНТАМ ВЛОЖЕННОГО КЛАССА

 public class Outer {
     public int id = 10;

     public void method() {
         System.out.println(Nested.text);
     }

     public static class Nested {
         public static String text = "text";
     }
 }

Зачем Использовать Вложенные Классы?
 - Это способ логически группировать классы, которые используются только в одном месте;
 - Это увеличивает инкапсуляцию;
 - Это может привести к более удобочитаемому и поддерживаемому коду;
