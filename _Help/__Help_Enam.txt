Перечисления enum - класс. Специально «заточеный» на решение задач создание некоторого ограниченного круга значений.

В простейшей форме перечисление - это список именованных констант.
Но в Java перечисления - это тип класса, могут иметь конструкторы, методы и переменные экземпляра.
Перечисления создаются с использованием ключевого слова enum.

enum Cat {
    Leopard, Puma, Lion, Tiger, Manul
}

Идентификаторы в фигурных скобках называются константами перечисления.
Каждый из них явно объявлен как ОТКРЫТЫЙ СТАТИЧЕСКИЙ ФИНАЛЬНЫЙ ЧЛЕН СЛАССА Cat.
Объявив перечисление, вы можете создавать переменные этого типа. Но делать это нужно без оператора new.
Вы можете присвоить переменной только те значения, которые определены в перечислении, например:

Cat manul = Cat.Manul;

------------------------------------------------------------------------------------------------------------------------

Перечислимые константы можно проверить на равенство:

if (manul == Cat.Manul) {

}

Также их можно применять в конструкции switch, где у операторов case используются константы из перечисления enum.
При этом имена констант используются без имени типа перечисления.

Cat cat = Cat.Manul;

switch (cat) {
	case Leopard:
		...
		break;
	case Puma:
		...
		break;
	case Lion:
		...
		break;
	case Tiger:
		...
		break;
	case Manul:
		...
		break;
}

------------------------------------------------------------------------------------------------------------------------

 - Метод values() - возвращает массив, содержащий список констант перечисления. ----------------------------------------
   Cat[] allСats = Cat.values();

 - Метод valueOf() - возвращает константу перечисления по ее строковому представлению. ---------------------------------
   Cat cat = Cat.valueOf("Puma");

 - Метод ordinal() - возвращает константу перечисления по ее индексу. --------------------------------------------------
   for(Cat cat : Cat.values()) {
   	   System.out.println(cat + " Его порядковое значение" + cat.ordinal());
   }

 - Методы compareTo() - сравнивает порядковые значения констант одного и того же перечисления. -------------------------
   Cat cat1 = Cat.Manul;
   Cat cat2 = Cat.Tiger;
   cat1.compareTo(cat2)

 - Методы equals() - сравнивает на эквивалентность(так же используется ==). --------------------------------------------
   Cat cat1 = Cat.Manul;
   Cat cat2 = Cat.Tiger;
   cat1.equals(cat2)

------------------------------------------------------------------------------------------------------------------------

Конструкторы, поля и методы перечисления

Перечисления, как и обычные классы, могут определять конструкторы, поля и методы. --------------------------------------

enum Color{
    RED("#FF0000"), BLUE("#0000FF"), GREEN("#00FF00");

    private String code;

    Color(String code) {
        this.code = code;
    }

    public String getCode() {
        return this.code;
    }
}

System.out.println(Color.RED.getCode());     // #FF0000
System.out.println(Color.GREEN.getCode());   // #00FF00

Перечисление Color определяет приватное поле code для хранения кода цвета, а с помощью метода getCode оно возвращается.
Через конструктор передается для него значение.
Следует отметить, что КОНСТРУКТОР ПО УМОЛЧАНИЮ ПРИВАТНЫЙ, то есть имеет модификатор private. ---------------------------
Любой другой модификатор будет считаться ошибкой.
Поэтому СОЗДАТЬ КОНСТАНТЫ перечисления С ПОМОШЬЮ КОНСТРУКТОРА мы можем ТОЛЬКО ВНУТРИ ПЕРЕЧИСЛЕНИЯ. ---------------------

Также можно определять методы для отдельных констант: ------------------------------------------------------------------

enum Operation{
    SUM {
        public int action(int x, int y) { return x + y;}
    },
    SUBTRACT {
        public int action(int x, int y) { return x - y;}
    },
    MULTIPLY {
        public int action(int x, int y) { return x * y;}
    };

    public abstract int action(int x, int y);
}

System.out.println(Operation.SUM.action(10, 4));       // 14
System.out.println(Operation.MULTIPLY.action(6, 4));   // 24

------------------------------------------------------------------------------------------------------------------------

ENUM занимает много памяти!!!

// занимает 1112 байт
public static enum Things {
    THING_1,
    THING_2
};

// другой вариант, занимает 128 байт
public static int THING_1 = 0;
public static int THING_2 = 1;
